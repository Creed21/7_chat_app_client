/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import kontroler.ClientController;
import model.Message;
import model.Model;
import model.User;
import requestResponse.Request;
import requestResponse.Operation;
import requestResponse.Response;

/**
 *
 * @author Korisnik
 */
public class ChatForm extends javax.swing.JFrame {

    /**
     * Creates new form ChatForm
     */
    public ChatForm() {
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);
        // load all users
        getAllUsers();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextConversation = new javax.swing.JTextArea();
        jComboBoxClients = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextNewMessage = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jBtnSendMessage = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextConversation.setColumns(20);
        jTextConversation.setRows(5);
        jScrollPane1.setViewportView(jTextConversation);

        jTextNewMessage.setColumns(20);
        jTextNewMessage.setRows(5);
        jScrollPane2.setViewportView(jTextNewMessage);

        jLabel1.setText("conversation");

        jLabel2.setText("new Message");

        jBtnSendMessage.setText("send Messaage");
        jBtnSendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSendMessageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxClients, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtnSendMessage)
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jComboBoxClients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBtnSendMessage)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnSendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSendMessageActionPerformed
        String newMessage = jTextNewMessage.getText().trim();
        
        Message message = new Message();
        message.setFromUser(controller.getUser());
        message.setToUser(toUser);
        message.setTimestamp(new Timestamp(System.currentTimeMillis()));
        message.setMessage(newMessage);
        
        Request request = new Request(Operation.SEND_MESSAGE, message);
        controller.sendRequest(request);
        
        Response response = controller.readReponse();
        
        if(response.isSuccess()) {
            jTextConversation.append(formatMessage(message));
        }
        
    }//GEN-LAST:event_jBtnSendMessageActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton jBtnSendMessage;
    private javax.swing.JComboBox<String> jComboBoxClients;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextConversation;
    private javax.swing.JTextArea jTextNewMessage;
    // End of variables declaration//GEN-END:variables

    private ClientController controller = ClientController.getInstance();
    private Map<String, User> allUsers = new HashMap<>();
    private User toUser;
    
    private void getAllUsers() {
        Request kz = new Request(Operation.GET_ALL_USERS);
        controller.sendRequest(kz);
        Response so = controller.readReponse();
        List<Model> users =  so.getResultList();
        
        jComboBoxClients.removeAllItems();
        allUsers.clear();
        
        for(Model m : users) {
            User u = (User) m;
            jComboBoxClients.addItem(u.getUsername() + " | " + u.getEmail());
            allUsers.put(u.getUsername(), u);
        }
        
        // Add ActionListener to handle selection
        jComboBoxClients.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedUser = (String) jComboBoxClients.getSelectedItem();
                if (selectedUser != null) {
                    String chatUsername = selectedUser.split(" ")[0];
                    System.out.println("Clicked on user: " + chatUsername);
                    // load chat with user
                    toUser = allUsers.get(chatUsername);
                    readChatMessages(toUser);
                }
            }
        });
    }
    
    public void readChatMessages(User user) {
        Request request = new Request(Operation.READ_CHAT_MESSAGES, user);
        controller.sendRequest(request);
        Response response = controller.readReponse();

        jTextConversation.setText("");

        System.out.println("request: " + request);

        if(!response.getResultList().isEmpty()) {
            for(Model m: response.getResultList()) {
                Message message = (Message) m;

                jTextConversation.append(formatMessage(message));
            }
        }
    }
    
    private String formatMessage(Message message) {
        return String.format(
                    "From: %s -> To: %s | %s\n\t%s\n",
                    message.getFromUser().getUsername(),
                    message.getToUser().getUsername(),
                    message.getTimestamp(),
                    message.getMessage()
                );
    }
    
}
